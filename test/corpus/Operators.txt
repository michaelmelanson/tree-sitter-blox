===============
Addition
===============

1 + a

---

(source_file
  statement: (expression_statement
    expression: (binary_expression
      lhs: (literal (number))
      operator: (add)
      rhs: (identifier))))

===============
Subtraction
===============

1 - a

---

(source_file
  statement: (expression_statement
    expression: (binary_expression
      lhs: (literal (number))
      operator: (subtract)
      rhs: (identifier))))

===============
Multiplication
===============

1 * a

---

(source_file
  statement: (expression_statement
    expression: (binary_expression
      lhs: (literal (number))
      operator: (multiply)
      rhs: (identifier))))

===============
Division
===============

1 / a

---

(source_file
  statement: (expression_statement
    expression: (binary_expression
      lhs: (literal (number))
      operator: (divide)
      rhs: (identifier))))

===============
Concatenate
===============

"hello" ++ " world"

---

(source_file
  statement: (expression_statement
    expression: (binary_expression
      lhs: (literal (string))
      operator: (concatenate)
      rhs: (literal (string)))))

===============
Equal
===============

1 == "foo"

---

(source_file
  statement: (expression_statement
    expression: (binary_expression
      lhs: (literal (number))
      operator: (equal)
      rhs: (literal (string)))))

===============
Not equal
===============

1 != "foo"

---

(source_file
  statement: (expression_statement
    expression: (binary_expression
      lhs: (literal (number))
      operator: (not_equal)
      rhs: (literal (string)))))

===============
Less than
===============

1 < "foo"

---

(source_file
  statement: (expression_statement
    expression: (binary_expression
      lhs: (literal (number))
      operator: (less_than)
      rhs: (literal (string)))))

===============
Less than or equal
===============

1 <= "foo"

---

(source_file
  statement: (expression_statement
    expression: (binary_expression
      lhs: (literal (number))
      operator: (less_or_equal)
      rhs: (literal (string)))))

===============
Greater than
===============

1 > "foo"

---

(source_file
  statement: (expression_statement
    expression: (binary_expression
      lhs: (literal (number))
      operator: (greater_than)
      rhs: (literal (string)))))

=================
Greater than or equal
=================

1 >= "foo"

---

(source_file
  statement: (expression_statement
    expression: (binary_expression
      lhs: (literal (number))
      operator: (greater_or_equal)
      rhs: (literal (string)))))

===============
Assignment (simple)
===============

x = 1

---

(source_file
  statement: (expression_statement
    expression: (binary_expression
      lhs: (identifier)
      operator: (assignment)
      rhs: (literal (number)))))

======================
Assignment (object property)
======================

foo.bar = 55

---

(source_file
  statement: (expression_statement
    expression: (binary_expression
      lhs: (object_index
        base: (identifier)
        index: (identifier))
      operator: (assignment)
      rhs: (literal (number)))))

======================
Append to array
======================

array << value

---

(source_file
  statement: (expression_statement
    expression: (binary_expression
      lhs: (identifier)
      operator: (append)
      rhs: (identifier))))
