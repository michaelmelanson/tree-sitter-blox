===============
Basic expressions
===============

1 + 1

---

(source_file
  statement: (expression_statement
    expression: (binary_expression
      lhs: (literal (number))
      operator: (add)
      rhs: (literal (number)))))

===============
Nesting
===============

1 + (b * "foo")

---

(source_file
  statement: (expression_statement
    expression: (binary_expression
      lhs: (literal (number))
      operator: (add)
      rhs: (group
        expression: (binary_expression
          lhs: (identifier)
          operator: (multiply)
          rhs: (literal (string)))))))

=======================
Precedence for multiplication
=======================

a*b+c*d

---

(source_file
  statement: (expression_statement
    expression: (binary_expression
      lhs: (binary_expression
        lhs: (identifier)
        operator: (multiply)
        rhs: (identifier))
      operator: (add)
      rhs: (binary_expression
        lhs: (identifier)
        operator: (multiply)
        rhs: (identifier)))))

=======================
Precedence for division
=======================

a/b + c/d

---

(source_file
  statement: (expression_statement
    expression: (binary_expression
      lhs: (binary_expression
        lhs: (identifier)
        operator: (divide)
        rhs: (identifier))
      operator: (add)
      rhs: (binary_expression
        lhs: (identifier)
        operator: (divide)
        rhs: (identifier)))))

=======================
Precedence for object indexing
=======================

x.a + y.b

---

(source_file
  statement: (expression_statement
    expression: (binary_expression
      lhs: (object_index
          base: (identifier)
          index: (identifier))
      operator: (add)
      rhs: (object_index
          base: (identifier)
          index: (identifier)))))

=======================
Precedence for array indexing
=======================

x[1] + y[2]

---

(source_file
  statement: (expression_statement
    expression: (binary_expression
      lhs: (array_index
          base: (identifier)
          index: (literal (number)))
      operator: (add)
      rhs: (array_index
          base: (identifier)
          index: (literal (number))))))

=======================
Precedence for assignment
=======================

x.a = 3 + i

---

(source_file
  statement: (expression_statement
    expression: (binary_expression
      lhs: (object_index
          base: (identifier)
          index: (identifier))
      operator: (assignment)
      rhs: (binary_expression
        lhs: (literal (number))
        operator: (add)
        rhs: (identifier)))))

=======================
Precedence for lambda
=======================

repeat(n: 1, fn: |x| { x + 1 })

---

(source_file
  statement: (expression_statement
    expression: (function_call
      function: (identifier)
      argument: (argument
        name: (identifier)
        value: (literal (number)))
      argument: (argument
        name: (identifier)
        value: (lambda
          parameter: (identifier)
          body: (block
            statement: (expression_statement
              expression: (binary_expression
                lhs: (identifier)
                operator: (add)
                rhs: (literal (number))))))))))


=======================
Array slice indexing (bounded)
=======================

a[1..'foo']

---

(source_file
  statement: (expression_statement
    expression: (array_slice
        base: (identifier)
        start: (literal (number))
        end: (literal (string)))))

==========================
Array slice indexing (open start)
==========================

a[..2]

---

(source_file
  statement: (expression_statement
    expression: (array_slice
        base: (identifier)
        end: (literal (number)))))

==========================
Array slice indexing (open end)
==========================

a[1..]

---

(source_file
  statement: (expression_statement
    expression: (array_slice
        base: (identifier)
        start: (literal (number)))))

=======================
Method call
=======================

a.b(c: 1)

---

(source_file
  statement: (expression_statement
    expression: (method_call
      base: (identifier)
      function: (identifier)
      argument: (argument
        name: (identifier)
        value: (literal (number))))))

=======================
Method call on array slice
=======================

a[1..2].b(c: 1)

---

(source_file
  statement: (expression_statement
    expression: (method_call
      base: (array_slice
        base: (identifier)
        start: (literal (number))
        end: (literal (number)))
      function: (identifier)
      argument: (argument
        name: (identifier)
        value: (literal (number))))))

=======================
Chained method calls
=======================

a.b(c: 'foo').d(e: 2)

---

(source_file
  statement: (expression_statement
    expression: (method_call
      base: (method_call
        base: (identifier)
        function: (identifier)
        argument: (argument
          name: (identifier)
          value: (literal (string))))
      function: (identifier)
      argument: (argument
        name: (identifier)
        value: (literal (number))))))


=======================
Array after if
=======================

let a = if true { [1] } else { [2] };
['a', a.b]

---

(source_file
  statement: (binding
    name: (identifier)
    value: (if_expression
      condition: (literal (boolean (boolean_true)))
      body: (block
        statement: (expression_statement
            expression: (array member: (literal (number)))))
      else: (else_expression
        body: (block
            statement: (expression_statement
                expression: (array member: (literal (number))))))))
  statement: (expression_statement
    expression: (array
      member: (literal (string))
      member: (object_index
        base: (identifier)
        index: (identifier)))))

=======================
Precedence for function calls vs addition
=======================

fib(x: x - 2) + fib(x: x - 1)

---

(source_file
  statement: (expression_statement
    expression: (binary_expression
      lhs: (function_call
        function: (identifier)
        argument: (argument
          name: (identifier)
          value: (binary_expression
            lhs: (identifier)
            operator: (subtract)
            rhs: (literal (number)))))
      operator: (add)
      rhs: (function_call
        function: (identifier)
        argument: (argument
          name: (identifier)
          value: (binary_expression
            lhs: (identifier)
            operator: (subtract)
            rhs: (literal (number))))))))
